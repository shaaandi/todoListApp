// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form Testing  Form SnapShot Testing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Form
    addTodo={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          id="#test"
          name="title"
          onChange={[Function]}
          placeholder="+ Add new Todo"
          type="text"
          value=""
        />,
        <select
          className="flagChooser"
          name="flag"
          onChange={[Function]}
          value="white"
        >
          <option
            value="white"
          >
            White
          </option>
          <option
            value="green"
          >
            Green
          </option>
          <option
            value="red"
          >
            Red
          </option>
        </select>,
      ],
      "className": "junk",
      "id": "form",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "id": "#test",
          "name": "title",
          "onChange": [Function],
          "placeholder": "+ Add new Todo",
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value="white"
            >
              White
            </option>,
            <option
              value="green"
            >
              Green
            </option>,
            <option
              value="red"
            >
              Red
            </option>,
          ],
          "className": "flagChooser",
          "name": "flag",
          "onChange": [Function],
          "value": "white",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "White",
              "value": "white",
            },
            "ref": null,
            "rendered": "White",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Green",
              "value": "green",
            },
            "ref": null,
            "rendered": "Green",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Red",
              "value": "red",
            },
            "ref": null,
            "rendered": "Red",
            "type": "option",
          },
        ],
        "type": "select",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            id="#test"
            name="title"
            onChange={[Function]}
            placeholder="+ Add new Todo"
            type="text"
            value=""
          />,
          <select
            className="flagChooser"
            name="flag"
            onChange={[Function]}
            value="white"
          >
            <option
              value="white"
            >
              White
            </option>
            <option
              value="green"
            >
              Green
            </option>
            <option
              value="red"
            >
              Red
            </option>
          </select>,
        ],
        "className": "junk",
        "id": "form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "id": "#test",
            "name": "title",
            "onChange": [Function],
            "placeholder": "+ Add new Todo",
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value="white"
              >
                White
              </option>,
              <option
                value="green"
              >
                Green
              </option>,
              <option
                value="red"
              >
                Red
              </option>,
            ],
            "className": "flagChooser",
            "name": "flag",
            "onChange": [Function],
            "value": "white",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "White",
                "value": "white",
              },
              "ref": null,
              "rendered": "White",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Green",
                "value": "green",
              },
              "ref": null,
              "rendered": "Green",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Red",
                "value": "red",
              },
              "ref": null,
              "rendered": "Red",
              "type": "option",
            },
          ],
          "type": "select",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
